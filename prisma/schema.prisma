// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String   @db.VarChar(200)
  password   String
  created_at DateTime @default(now())

  categoryNested CategoryNested?
  bankAccount    BankAccountUser?
  transaction    Transaction[]

  @@map("user")
}

model TypeOfTransaction {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(10)
  slug String

  category    Category[]
  Transaction Transaction[]

  @@map("type_of_transaction")
}

model Category {
  id                  Int      @id @default(autoincrement())
  type_transaction_id Int
  name                String   @db.VarChar(100)
  slug                String
  created_at          DateTime @default(now())

  categoryNested    CategoryNested[]
  typeOfTransaction TypeOfTransaction @relation(fields: [type_transaction_id], references: [id])
  Transaction       Transaction[]

  @@map("category")
}

model CategoryNested {
  id          Int       @id @default(autoincrement())
  user_id     Int       @unique
  category_id Int       @unique
  name        String    @db.VarChar(100)
  slug        String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp

  category Category @relation(fields: [category_id], references: [id])
  user     User     @relation(fields: [user_id], references: [id])

  @@map("category_nested")
}

enum BankAccountEnum {
  WALLET
  SAVINGS
  CHECKING
}

model BankAccount {
  id   Int             @id @default(autoincrement())
  name String
  type BankAccountEnum

  BankAccountUser BankAccountUser[]
  transaction     Transaction[]

  @@map("bank_account")
}

model BankAccountUser {
  id              Int @id @default(autoincrement())
  user_id         Int @unique
  bank_account_id Int @unique

  created_at DateTime  @default(now())
  updated_at DateTime? @db.Timestamp
  deleted_at DateTime? @db.Timestamp

  user        User        @relation(fields: [user_id], references: [id])
  bankAccount BankAccount @relation(fields: [bank_account_id], references: [id])

  @@unique([user_id, bank_account_id])
  @@map("bank_account_user")
}

model Transaction {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  bank_account_id     Int
  type_transaction_id Int
  category_id         Int
  title               String   @db.VarChar(254)
  description         String?  @db.Text
  value_transaction   Decimal  @db.Decimal(11, 2)
  due_date            DateTime @db.Date
  finished            Boolean  @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime? @db.Timestamp
  deleted_at DateTime? @db.Timestamp

  user            User              @relation(fields: [user_id], references: [id])
  bankAccount     BankAccount       @relation(fields: [bank_account_id], references: [id])
  typeTransaction TypeOfTransaction @relation(fields: [type_transaction_id], references: [id])
  category        Category          @relation(fields: [category_id], references: [id])

  transactionHistorical TransactionHistorical[]
  transactionSetting    TransactionSetting[]

  @@map("transaction")
}

model TransactionHistorical {
  id               Int     @id @default(autoincrement())
  transaction_id   Int
  previous_balance Decimal @db.Decimal(11, 2)
  current_balance  Decimal @db.Decimal(11, 2)

  created_at DateTime @default(now())

  transaction Transaction @relation(fields: [transaction_id], references: [id])

  @@map("transaction_historical")
}

enum TransactionSettingInstallmentsEnum {
  YEARLY
  SEMI_ANNUAL
  QUARTERLY
  BIMONTHLY
  MONTHLY
  BIWEEKLY
  WEEKLY
  DAYS
}

model TransactionSetting {
  id                    Int                                 @id @default(autoincrement())
  transaction_id        Int
  fixed                 Boolean?
  installments          Boolean?
  installments_quantuty Int?                                @db.MediumInt
  installments_interval TransactionSettingInstallmentsEnum?

  created_at DateTime  @default(now())
  updated_at DateTime? @db.Timestamp
  deleted_at DateTime? @db.Timestamp

  transaction Transaction @relation(fields: [transaction_id], references: [id])

  @@map("transaction_setting")
}
